{"version":3,"sources":["utils/searchHelper.ts","components/SearchLink.tsx","components/PeopleFilters.tsx","components/Loader/Loader.tsx","types/SortTypes.ts","components/SortParam.tsx","components/PersonLink.tsx","components/PeopleTable.tsx","api.ts","utils/sortPeople.ts","pages/PeoplePage.tsx","utils/filterPeople.ts","components/Navbar.tsx","pages/NotFoundPage.tsx","pages/HomePage.tsx","App.tsx","index.tsx"],"names":["getSearchWith","currentParams","paramsToUpdate","newParams","URLSearchParams","toString","Object","entries","forEach","key","value","delete","Array","isArray","part","append","set","SearchLink","children","params","props","useSearchParams","searchParams","to","search","initialCenturies","emptyParams","sex","query","centuries","PeopleFilters","setSearchParams","get","centuriesFromUrl","getAll","handleBtnCenturyClick","century","includes","filter","currentCentury","className","classNames","type","placeholder","onChange","event","newQuery","updatedSearchParams","trim","handleQueryChange","target","map","length","Loader","SortTypes","SortParam","param","appliedSort","appliedOrder","title","charAt","toUpperCase","slice","sortType","sort","order","handleSortClick","PersonLink","person","personSlug","useParams","name","born","died","fatherName","motherName","mother","father","slug","PeopleTable","filteredPeople","sortKeys","NAME","SEX","BORN","DIED","API_URL","wait","delay","Promise","resolve","setTimeout","then","fetch","response","json","PeoplePage","useState","people","setPeople","error","setError","isLoading","setIsLoading","useEffect","getPeople","finalPeople","find","m","f","finalperson","catch","finally","toLowerCase","join","setFilteredPeople","changes","filtered","personCentury","Math","ceil","filterPeople","person1","person2","localeCompare","reverse","sortPeople","handleIsActive","isActive","Navbar","role","NotFoundPage","HomePage","App","path","element","replace","createRoot","document","getElementById","render"],"mappings":"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","file":"static/js/main.ecf7dad4.chunk.js","sourcesContent":["export type SearchParams = {\n  [key: string]: string | string[] | null,\n};\n\n/**\n * This function prepares a correct search string\n * from a given currentParams and paramsToUpdate.\n */\nexport function getSearchWith(\n  currentParams: URLSearchParams,\n  paramsToUpdate: SearchParams, // it's our custom type\n): string {\n  // copy currentParams by creating new object from a string\n  const newParams = new URLSearchParams(\n    currentParams.toString(),\n  );\n\n  // Here is the example of paramsToUpdate\n  // {\n  //   sex: 'm',                ['sex', 'm']\n  //   order: null,             ['order', null]\n  //   centuries: ['16', '19'], ['centuries', ['16', '19']]\n  // }\n  //\n  // - params with the `null` value are deleted;\n  // - string value is set to given param key;\n  // - array of strings adds several params with the same key;\n\n  Object.entries(paramsToUpdate)\n    .forEach(([key, value]) => {\n      if (value === null) {\n        newParams.delete(key);\n      } else if (Array.isArray(value)) {\n        // we delete the key to remove old values\n        newParams.delete(key);\n\n        value.forEach(part => {\n          newParams.append(key, part);\n        });\n      } else {\n        newParams.set(key, value);\n      }\n    });\n\n  // we return a string to use it inside links\n  return newParams.toString();\n}\n","import { Link, LinkProps, useSearchParams } from 'react-router-dom';\nimport { getSearchWith, SearchParams } from '../utils/searchHelper';\n\n/**\n * To replace the the standard `Link` we take all it props except for `to`\n * along with the custom `params` prop that we use for updating the search\n */\ntype Props = Omit<LinkProps, 'to'> & {\n  params: SearchParams,\n};\n\n/**\n * SearchLink updates the given `params` in the search keeping the `pathname`\n * and the other existing search params (see `getSearchWith`)\n */\nexport const SearchLink: React.FC<Props> = ({\n  children, // this is the content between the open and closing tags\n  params, // the params to be updated in the `search`\n  ...props // all usual Link props like `className`, `style` and `id`\n}) => {\n  const [searchParams] = useSearchParams();\n\n  return (\n    <Link\n      // to={{ search: getSearchWith(searchParams, { query: 'sdf' }) }}\n      // to={{ search: getSearchWith(searchParams, { query: null }) }}\n      // to={{ search: getSearchWith(searchParams, { centuries: ['16', '18'] }) }}\n      to={{\n        search: getSearchWith(searchParams, params),\n      }}\n      {...props} // copy all the other props\n    >\n      {children}\n    </Link>\n  );\n};\n","import { useSearchParams } from 'react-router-dom';\n\nimport classNames from 'classnames';\nimport { SearchLink } from './SearchLink';\n\nconst initialCenturies = ['16', '17', '18', '19', '20'];\n\nconst emptyParams = {\n  sex: null,\n  query: null,\n  centuries: null,\n};\n\nexport const PeopleFilters = () => {\n  const [searchParams, setSearchParams] = useSearchParams();\n\n  const query = searchParams.get('query') || '';\n  const centuriesFromUrl = searchParams.getAll('centuries') || [];\n\n  const handleQueryChange = (newQuery: string) => {\n    const updatedSearchParams = new URLSearchParams(searchParams);\n\n    if (!newQuery.trim()) {\n      updatedSearchParams.delete('query');\n    } else {\n      updatedSearchParams.set('query', newQuery.trim());\n    }\n\n    setSearchParams(updatedSearchParams.toString());\n  };\n\n  const handleBtnCenturyClick = (century: string) => {\n    return centuriesFromUrl.includes(century)\n      ? centuriesFromUrl.filter(currentCentury => currentCentury !== century)\n      : [...centuriesFromUrl, century];\n  };\n\n  return (\n    <nav className=\"panel\">\n      <p className=\"panel-heading\">Filters</p>\n\n      <p className=\"panel-tabs\" data-cy=\"SexFilter\">\n        <SearchLink\n          className={classNames({ 'is-active': !searchParams.get('sex') })}\n          params={{ sex: null }}\n        >\n          All\n        </SearchLink>\n\n        <SearchLink\n          className={classNames({\n            'is-active': searchParams.get('sex') === 'm',\n          })}\n          params={{ sex: 'm' }}\n        >\n          Male\n        </SearchLink>\n\n        <SearchLink\n          className={classNames({\n            'is-active': searchParams.get('sex') === 'f',\n          })}\n          params={{ sex: 'f' }}\n        >\n          Female\n        </SearchLink>\n      </p>\n\n      <div className=\"panel-block\">\n        <p className=\"control has-icons-left\">\n          <input\n            data-cy=\"NameFilter\"\n            type=\"search\"\n            className=\"input\"\n            placeholder=\"Search\"\n            value={query}\n            onChange={(event) => handleQueryChange(event.target.value)}\n          />\n\n          <span className=\"icon is-left\">\n            <i className=\"fas fa-search\" aria-hidden=\"true\" />\n          </span>\n        </p>\n      </div>\n\n      <div className=\"panel-block\">\n        <div className=\"level is-flex-grow-1 is-mobile\" data-cy=\"CenturyFilter\">\n          <div className=\"level-left\">\n            {initialCenturies.map(century => (\n              <SearchLink\n                key={century}\n                data-cy=\"century\"\n                className={classNames('button', 'mr-1', {\n                  'is-info': centuriesFromUrl.includes(century),\n                })}\n                params={{ centuries: handleBtnCenturyClick(century) }}\n              >\n                {century}\n              </SearchLink>\n            ))}\n          </div>\n\n          <div className=\"level-right ml-4\">\n            <SearchLink\n              data-cy=\"centuryALL\"\n              className={classNames(\n                'button',\n                'is-success',\n                {\n                  'is-outlined': centuriesFromUrl.length,\n                },\n              )}\n              params={{ centuries: null }}\n            >\n              All\n            </SearchLink>\n          </div>\n        </div>\n      </div>\n\n      <div className=\"panel-block\">\n        <SearchLink\n          className={classNames(\n            'button',\n            'is-link',\n            'is-outlined',\n            'is-fullwidth',\n          )}\n          params={emptyParams}\n        >\n          Reset all filters\n        </SearchLink>\n      </div>\n    </nav>\n  );\n};\n","import './Loader.scss';\n\nexport const Loader = () => (\n  <div className=\"Loader\" data-cy=\"loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","export enum SortTypes {\n  NAME = 'name',\n  SEX = 'sex',\n  BORN = 'born',\n  DIED = 'died',\n}\n","import classNames from 'classnames';\nimport { useSearchParams } from 'react-router-dom';\nimport { Person } from '../types';\nimport { SearchLink } from './SearchLink';\n\ntype Props = {\n  param: keyof Person,\n};\n\ntype SortParams = {\n  sort: keyof Person | null,\n  order: 'desc' | null,\n};\n\nexport const SortParam: React.FC<Props> = ({ param }) => {\n  const [searchParams] = useSearchParams();\n\n  const appliedSort = searchParams.get('sort') || null;\n  const appliedOrder = searchParams.get('order') || null;\n\n  const handleSortClick = (sortType: keyof Person) => {\n    const newParams: SortParams = {\n      sort: null,\n      order: null,\n    };\n\n    if (appliedSort !== sortType) {\n      newParams.sort = sortType;\n\n      return newParams;\n    }\n\n    if (appliedSort === sortType && !appliedOrder) {\n      newParams.sort = sortType;\n      newParams.order = 'desc';\n\n      return newParams;\n    }\n\n    return newParams;\n  };\n\n  const title = param.charAt(0).toUpperCase() + param.slice(1);\n\n  return (\n    <th key={param}>\n      <span className=\"is-flex is-flex-wrap-nowrap\">\n        {title}\n        <SearchLink params={handleSortClick(param)}>\n          <span className=\"icon\">\n            <i className={classNames('fas', {\n              'fa-sort': appliedSort !== param,\n              'fa-sort-up': appliedSort === param && !appliedOrder,\n              'fa-sort-down': appliedSort === param && appliedOrder,\n            })}\n            />\n          </span>\n        </SearchLink>\n      </span>\n    </th>\n  );\n};\n","import classNames from 'classnames';\nimport { Link, useParams, useSearchParams } from 'react-router-dom';\nimport { Person } from '../types';\n\ntype Props = {\n  person: Person,\n};\n\nexport const PersonLink: React.FC<Props> = ({ person }) => {\n  const { personSlug } = useParams();\n  const [searchParams] = useSearchParams();\n\n  const {\n    name, sex, born, died, fatherName, motherName, mother, father, slug,\n  } = person;\n\n  return (\n    <tr\n      data-cy=\"person\"\n      className={classNames({\n        'has-background-warning': personSlug === slug,\n      })}\n      key={person.slug}\n    >\n      <td>\n        <Link\n          to={`/people/${slug}?${searchParams.toString()}`}\n          className={classNames({\n            'has-text-danger': sex === 'f',\n          })}\n        >\n          {name}\n        </Link>\n      </td>\n\n      <td>{sex}</td>\n      <td>{born}</td>\n      <td>{died}</td>\n      <td>\n        {mother ? (\n          <Link to={`/people/${mother.slug}?${searchParams.toString()}`} className=\"has-text-danger\">\n            {motherName}\n          </Link>\n        ) : motherName || '-'}\n      </td>\n\n      <td>\n        {father ? (\n          <Link to={`/people/${father.slug}?${searchParams.toString()}`}>\n            {fatherName}\n          </Link>\n        ) : fatherName || '-'}\n      </td>\n    </tr>\n  );\n};\n","import { Person } from '../types';\nimport { SortTypes } from '../types/SortTypes';\nimport { SortParam } from './SortParam';\nimport { PersonLink } from './PersonLink';\n\ntype Props = {\n  filteredPeople: Person[],\n};\n\nexport const PeopleTable: React.FC<Props> = ({ filteredPeople }) => {\n  const sortKeys\n    = [SortTypes.NAME, SortTypes.SEX, SortTypes.BORN, SortTypes.DIED];\n\n  return (\n    <table\n      data-cy=\"peopleTable\"\n      className=\"table is-striped is-hoverable is-narrow is-fullwidth\"\n    >\n      <thead>\n        <tr>\n          {sortKeys.map(key => (\n            <SortParam param={key} key={key} />\n          ))}\n\n          <th>Mother</th>\n          <th>Father</th>\n        </tr>\n      </thead>\n\n      <tbody>\n        {filteredPeople.map(person => (\n          <PersonLink person={person} key={person.slug} />\n        ))}\n      </tbody>\n    </table>\n  );\n};\n","import { Person } from './types/Person';\n\n// eslint-disable-next-line max-len\nconst API_URL = 'https://mate-academy.github.io/react_people-table/api/people.json';\n\nfunction wait(delay: number) {\n  return new Promise(resolve => setTimeout(resolve, delay));\n}\n\nexport async function getPeople(): Promise<Person[]> {\n  // keep this delay for testing purpose\n  return wait(500)\n    .then(() => fetch(API_URL))\n    .then(response => response.json());\n}\n","import { Person } from '../types';\n\ntype Props = {\n  filtered: Person[],\n  sortType: keyof Person | null,\n  order: string | null,\n};\n\nexport const sortPeople = ({ filtered, sortType, order }: Props) => {\n  const filteredPeople = [...filtered];\n\n  filteredPeople.sort((person1, person2) => {\n    if (sortType === 'born' || sortType === 'died') {\n      return person1[sortType] - person2[sortType];\n    }\n\n    if (sortType === 'sex' || sortType === 'name') {\n      return person1[sortType].localeCompare(person2[sortType]);\n    }\n\n    return 0;\n  });\n\n  if (order) {\n    filteredPeople.reverse();\n  }\n\n  return filteredPeople;\n};\n","/* eslint-disable no-nested-ternary */\nimport { useEffect, useState } from 'react';\nimport { useSearchParams } from 'react-router-dom';\nimport { PeopleFilters } from '../components/PeopleFilters';\nimport { Loader } from '../components/Loader';\nimport { PeopleTable } from '../components/PeopleTable';\nimport { getPeople } from '../api';\nimport { Person } from '../types';\nimport { sortPeople } from '../utils/sortPeople';\nimport { filterPeople } from '../utils/filterPeople';\n\nexport const PeoplePage = () => {\n  const [people, setPeople] = useState<Person[]>([]);\n  const [error, setError] = useState(false);\n  const [isLoading, setIsLoading] = useState(false);\n\n  const [searchParams] = useSearchParams();\n\n  useEffect(() => {\n    setIsLoading(true);\n\n    getPeople()\n      .then(response => {\n        const finalPeople = response.map(person => {\n          const mother = response.find(m => m.name === person.motherName);\n          const father = response.find(f => f.name === person.fatherName);\n          const finalperson = { ...person };\n\n          if (mother) {\n            finalperson.mother = mother;\n          }\n\n          if (father) {\n            finalperson.father = father;\n          }\n\n          return finalperson;\n        });\n\n        setPeople(finalPeople);\n      })\n      .catch(() => {\n        setError(true);\n      })\n      .finally(() => {\n        setIsLoading(false);\n      });\n  }, []);\n\n  const filter = searchParams.get('sex') || null;\n  const query = searchParams.get('query')?.toLowerCase() || null;\n  const sortType = searchParams.get('sort') as keyof Person || null;\n  const order = searchParams.get('order') || null;\n  const centuries = searchParams.getAll('centuries').join(',') || '';\n\n  const [filteredPeople, setFilteredPeople] = useState<Person[]>([]);\n\n  useEffect(() => {\n    let changes = false;\n    let filtered = [...people];\n\n    if (filter || query || centuries) {\n      filtered = filterPeople({\n        filtered, filter, query, centuries,\n      });\n\n      changes = true;\n    }\n\n    if (sortType) {\n      filtered = sortPeople({ filtered, sortType, order });\n\n      changes = true;\n    }\n\n    if (changes) {\n      setFilteredPeople(filtered);\n\n      return;\n    }\n\n    setFilteredPeople(people);\n  }, [people, filter, query, sortType, centuries, order]);\n\n  return (\n    <>\n      <h1 className=\"title\">People Page</h1>\n\n      <div className=\"block\">\n        <div className=\"columns is-desktop is-flex-direction-row-reverse\">\n          {!isLoading && (\n            <div className=\"column is-7-tablet is-narrow-desktop\">\n              <PeopleFilters />\n            </div>\n          )}\n\n          <div className=\"column\">\n            <div className=\"box table-container\">\n              {isLoading && <Loader />}\n\n              {!isLoading && error && (\n                <p data-cy=\"peopleLoadingError\">Something went wrong</p>\n              )}\n\n              {!isLoading && !error && !people.length && (\n                <p data-cy=\"noPeopleMessage\">\n                  There are no people on the server\n                </p>\n              )}\n\n              {!filteredPeople.length && !isLoading ? (\n                <p>\n                  There are no people matching the current search criteria\n                </p>\n              ) : (\n                !isLoading && (\n                  <PeopleTable filteredPeople={filteredPeople} />\n                ))}\n            </div>\n          </div>\n        </div>\n      </div>\n    </>\n  );\n};\n","import { Person } from '../types';\n\ntype Props = {\n  filtered: Person[],\n  filter: string | null,\n  query: string | null,\n  centuries: string,\n};\n\nexport const filterPeople = ({\n  filtered, filter, query, centuries,\n}: Props) => {\n  let filteredPeople = filtered;\n\n  if (filter) {\n    filteredPeople = filteredPeople.filter(person => person.sex === filter);\n  }\n\n  if (query) {\n    filteredPeople = filteredPeople.filter(person => (\n      person.name.toLowerCase().includes(query)\n      || person.motherName?.toLowerCase().includes(query)\n      || person.fatherName?.toLowerCase().includes(query)\n    ));\n  }\n\n  if (centuries.length > 0) {\n    filteredPeople = filteredPeople.filter((person) => {\n      const personCentury = Math.ceil(person.born / 100);\n\n      return centuries.includes(personCentury.toString());\n    });\n  }\n\n  return filteredPeople;\n};\n","import classNames from 'classnames';\nimport { NavLink } from 'react-router-dom';\n\nconst handleIsActive = ({ isActive }: { isActive: boolean }) => (\n  classNames('navbar-item', { 'has-background-grey-lighter': isActive }));\n\nexport const Navbar = () => {\n  return (\n    <nav\n      data-cy=\"nav\"\n      className=\"navbar is-fixed-top has-shadow\"\n      role=\"navigation\"\n      aria-label=\"main navigation\"\n    >\n      <div className=\"container\">\n        <div className=\"navbar-brand\">\n          <NavLink className={handleIsActive} to=\"/\">\n            Home\n          </NavLink>\n\n          <NavLink\n            aria-current=\"page\"\n            className={handleIsActive}\n            to=\"/people\"\n          >\n            People\n          </NavLink>\n        </div>\n      </div>\n    </nav>\n  );\n};\n","export const NotFoundPage = () => (\n  <h1 className=\"title\">Page not found</h1>\n);\n","export const HomePage = () => (\n  <h1 className=\"title\">Home Page</h1>\n);\n","import { Navigate, Route, Routes } from 'react-router-dom';\nimport { PeoplePage } from './pages/PeoplePage';\nimport { Navbar } from './components/Navbar';\n\nimport './App.scss';\nimport { NotFoundPage } from './pages/NotFoundPage';\nimport { HomePage } from './pages/HomePage';\n\nexport const App = () => {\n  return (\n    <div data-cy=\"app\">\n      <Navbar />\n\n      <div className=\"section\">\n        <div className=\"container\">\n          <Routes>\n            <Route path=\"/\" element={<HomePage />} />\n            <Route path=\"home\" element={<Navigate to=\"..\" replace />} />\n            <Route path=\"people\" element={<PeoplePage />}>\n              <Route path=\":personSlug\" element={<PeoplePage />} />\n            </Route>\n            <Route\n              path=\"*\"\n              element={<NotFoundPage />}\n            />\n          </Routes>\n        </div>\n      </div>\n    </div>\n  );\n};\n","import { createRoot } from 'react-dom/client';\nimport { HashRouter as Router } from 'react-router-dom';\n\nimport 'bulma/css/bulma.css';\nimport '@fortawesome/fontawesome-free/css/all.css';\n\nimport { App } from './App';\n\ncreateRoot(document.getElementById('root') as HTMLDivElement)\n  .render(\n    <Router>\n      <App />\n    </Router>,\n  );\n"],"sourceRoot":""}